<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Containerization on The IT Blog</title>
        <link>https://blog.moroz.cc/tags/containerization/</link>
        <description>Recent content in Containerization on The IT Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Tue, 04 Jun 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.moroz.cc/tags/containerization/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>How to deploy Pi-hole as a docker container in local network to block ads</title>
        <link>https://blog.moroz.cc/post/how-to-deploy-pi-hole-as-a-docker-container-in-local-network-to-block-ads/</link>
        <pubDate>Tue, 04 Jun 2024 00:00:00 +0000</pubDate>
        
        <guid>https://blog.moroz.cc/post/how-to-deploy-pi-hole-as-a-docker-container-in-local-network-to-block-ads/</guid>
        <description>&lt;img src="https://blog.moroz.cc/post/how-to-deploy-pi-hole-as-a-docker-container-in-local-network-to-block-ads/header.png" alt="Featured image of post How to deploy Pi-hole as a docker container in local network to block ads" /&gt;&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Pi-hole is a network-wide ad blocker that acts as a DNS sinkhole. It is designed to block advertisements and trackers at the network level, meaning any device connected to your network can benefit from it without needing additional software.&lt;/p&gt;
&lt;h3 id=&#34;what-is-pi-hole&#34;&gt;What is Pi-hole?&lt;/h3&gt;
&lt;p&gt;Pi-hole is an open-source software project that serves as a DNS (Domain Name System) sinkhole. It is typically run on a low-power device, like a Raspberry Pi, but can also be installed on other hardware or within virtual machines. It intercepts DNS requests from devices on your local network and filters out domains known to serve ads, tracking, and malicious content.&lt;/p&gt;
&lt;h3 id=&#34;reasons-for-using-pi-hole&#34;&gt;Reasons for using Pi-hole&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Network-wide Ad Blocking: Unlike browser-based ad blockers, Pi-hole blocks ads for every device on your network, including smartphones, tablets, smart TVs, and other IoT devices.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enhanced Privacy: By blocking trackers, Pi-hole helps to protect your privacy across all devices. It prevents your data from being sent to third-party tracking services.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Improved Performance: Since ads and trackers are blocked before they are downloaded, pages can load faster, and there is reduced bandwidth usage.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Centralized Management: Pi-hole offers a web-based interface where you can view statistics, add custom block or allow lists, and manage settings, making it easy to control and monitor ad blocking for the entire network.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Device Compatibility: Pi-hole works with any device that uses your network&amp;rsquo;s DNS, making it a versatile solution for ad blocking.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;can-pi-hole-block-ads&#34;&gt;Can Pi-hole Block Ads?&lt;/h3&gt;
&lt;p&gt;Yes, Pi-hole can block ads effectively. It maintains a list of known ad-serving domains and blocks DNS requests to these domains. When a device on your network requests an ad domain, Pi-hole intercepts the request and prevents the ad content from being loaded. This results in fewer ads being displayed across all devices on the network, regardless of the application or browser being used.&lt;/p&gt;
&lt;h3 id=&#34;pi-hole-features&#34;&gt;Pi-hole features&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DNS Requests: Devices on your network send DNS requests to translate domain names (like example.com) into IP addresses.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Filtering: Pi-hole compares these DNS requests against its blocklists. If the domain is known to serve ads or track users, Pi-hole blocks the request.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sinkholing: Blocked requests are redirected to a &amp;ldquo;sinkhole,&amp;rdquo; typically an IP address that does nothing, ensuring the ad or tracker is not loaded.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Permitting: If the domain is not on the blocklist, Pi-hole forwards the request to an upstream DNS server (such as Google&amp;rsquo;s DNS or your ISP&amp;rsquo;s DNS) and returns the result to the requesting device.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;h3 id=&#34;deploy-as-a-docker-container&#34;&gt;Deploy as a docker container&lt;/h3&gt;
&lt;p&gt;Create a &lt;code&gt;docker-compose.yml&lt;/code&gt; file with the following configuration:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;services&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pihole&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;container_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;pihole&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;pihole/pihole:latest&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;53:53/tcp&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;53:53/udp&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;8002:80/tcp&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;environment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;TZ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Europe/Kiev&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;WEBPASSWORD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;pihole&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;s1&#34;&gt;&amp;#39;./etc-pihole:/etc/pihole&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;s1&#34;&gt;&amp;#39;./etc-dnsmasq.d:/etc/dnsmasq.d&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;restart&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;unless-stopped&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Explanation of important configuration parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;53:53/tcp&lt;/code&gt; and &lt;code&gt;53:53/udp&lt;/code&gt;: Binding both TCP and UDP 53 port of container to the same 53 port of host.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;8002:80/tcp&lt;/code&gt;: Binding 80 port of container to 8002 port of host, as the result web intarface will be available at 8002 port.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TZ: &#39;Europe/Kiev&#39;&lt;/code&gt;: Setting correct timezone (your timezone might be different).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WEBPASSWORD: &#39;pihole&#39;&lt;/code&gt;: Setting a password for admin interface.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;volumes&lt;/code&gt; section: Binding configuration folders from container to local folders so they persist in case container gets updated, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After saving the file, start the container:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker compose up -d&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;check-the-admin-interface&#34;&gt;Check the admin interface&lt;/h3&gt;
&lt;p&gt;Then use the host IP of your server in the local network, and navigate to url with the port in your browser, (I am using url &lt;code&gt;http://192.168.0.37:8002/admin&lt;/code&gt; in this example). You should see the pihole login page:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.moroz.cc/post/how-to-deploy-pi-hole-as-a-docker-container-in-local-network-to-block-ads/Screenshot_20240604_122302.png&#34;
	width=&#34;1324&#34;
	height=&#34;884&#34;
	srcset=&#34;https://blog.moroz.cc/post/how-to-deploy-pi-hole-as-a-docker-container-in-local-network-to-block-ads/Screenshot_20240604_122302_hu10926007443499300719.png 480w, https://blog.moroz.cc/post/how-to-deploy-pi-hole-as-a-docker-container-in-local-network-to-block-ads/Screenshot_20240604_122302_hu821624361233680090.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Pi-hole authentication web page.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;149&#34;
		data-flex-basis=&#34;359px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Enter the password defined in config earlier, then you should be able to log in:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.moroz.cc/post/how-to-deploy-pi-hole-as-a-docker-container-in-local-network-to-block-ads/Screenshot_20240604_122446.png&#34;
	width=&#34;1324&#34;
	height=&#34;884&#34;
	srcset=&#34;https://blog.moroz.cc/post/how-to-deploy-pi-hole-as-a-docker-container-in-local-network-to-block-ads/Screenshot_20240604_122446_hu5648179359832049729.png 480w, https://blog.moroz.cc/post/how-to-deploy-pi-hole-as-a-docker-container-in-local-network-to-block-ads/Screenshot_20240604_122446_hu9476532913898545638.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Pi-hole admin interface.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;149&#34;
		data-flex-basis=&#34;359px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;ensure-port-53-is-bound&#34;&gt;Ensure port 53 is bound&lt;/h3&gt;
&lt;p&gt;It is recommended to check if port 53 is listened by your server host machine. To check it ssh into your server and run command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo netstat -tuwpan &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep &lt;span class=&#34;m&#34;&gt;53&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If port is listening, you should see output like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.moroz.cc/post/how-to-deploy-pi-hole-as-a-docker-container-in-local-network-to-block-ads/Screenshot_20240604_122820.png&#34;
	width=&#34;980&#34;
	height=&#34;307&#34;
	srcset=&#34;https://blog.moroz.cc/post/how-to-deploy-pi-hole-as-a-docker-container-in-local-network-to-block-ads/Screenshot_20240604_122820_hu12284886920787672499.png 480w, https://blog.moroz.cc/post/how-to-deploy-pi-hole-as-a-docker-container-in-local-network-to-block-ads/Screenshot_20240604_122820_hu17430702722528012465.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Correctly listened tcp/udp port 53 on host server.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;319&#34;
		data-flex-basis=&#34;766px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;define-your-pi-hole-dns-server-as-primary-in-your-router&#34;&gt;Define your Pi-hole DNS server as primary in your router&lt;/h3&gt;
&lt;p&gt;To actually make use of your Pi-hole service for all the devices in the local network you should set you Pi-hole sever as a primary DNS server in the router settings. Use IP address of your host server (in my case 192.168.0.37) in the router setting. This procedure is different for every router, so I just show the result here:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.moroz.cc/post/how-to-deploy-pi-hole-as-a-docker-container-in-local-network-to-block-ads/Screenshot_20240604_123254.png&#34;
	width=&#34;1324&#34;
	height=&#34;884&#34;
	srcset=&#34;https://blog.moroz.cc/post/how-to-deploy-pi-hole-as-a-docker-container-in-local-network-to-block-ads/Screenshot_20240604_123254_hu15803226095731717228.png 480w, https://blog.moroz.cc/post/how-to-deploy-pi-hole-as-a-docker-container-in-local-network-to-block-ads/Screenshot_20240604_123254_hu10220070801246660490.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;DNS Settings&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;149&#34;
		data-flex-basis=&#34;359px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;After that you should see some queries in Pi-hole admin interface:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.moroz.cc/post/how-to-deploy-pi-hole-as-a-docker-container-in-local-network-to-block-ads/Screenshot_20240604_123540.png&#34;
	width=&#34;1324&#34;
	height=&#34;884&#34;
	srcset=&#34;https://blog.moroz.cc/post/how-to-deploy-pi-hole-as-a-docker-container-in-local-network-to-block-ads/Screenshot_20240604_123540_hu12110411488895704587.png 480w, https://blog.moroz.cc/post/how-to-deploy-pi-hole-as-a-docker-container-in-local-network-to-block-ads/Screenshot_20240604_123540_hu9165105089036697994.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Pi-hole queries&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;149&#34;
		data-flex-basis=&#34;359px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Pi-hole is a powerful tool for network-wide ad blocking, offering enhanced privacy, improved performance, and centralized control over DNS filtering. It is recommended for anyone looking to reduce ads and trackers across all devices in their home or small office network.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>What is Docker and Docker Compose and how to install and use it on Debian</title>
        <link>https://blog.moroz.cc/post/what-is-docker-and-docker-compose-and-how-to-install-and-use-it-on-debian/</link>
        <pubDate>Mon, 03 Jun 2024 00:00:00 +0000</pubDate>
        
        <guid>https://blog.moroz.cc/post/what-is-docker-and-docker-compose-and-how-to-install-and-use-it-on-debian/</guid>
        <description>&lt;img src="https://blog.moroz.cc/post/what-is-docker-and-docker-compose-and-how-to-install-and-use-it-on-debian/header.png" alt="Featured image of post What is Docker and Docker Compose and how to install and use it on Debian" /&gt;&lt;h2 id=&#34;what-is-docker-and-docker-compose&#34;&gt;What is Docker and Docker Compose&lt;/h2&gt;
&lt;p&gt;Docker and Docker Compose are tools designed to simplify the process of managing and deploying applications in containers. Here’s an overview of each, along with their differences and key benefits.&lt;/p&gt;
&lt;h3 id=&#34;docker&#34;&gt;Docker&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Definition:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Docker is a platform that uses containerization to deploy, manage, and run applications. Containers are lightweight, portable, and consistent environments that include everything needed to run a piece of software, such as the code, runtime, system tools, libraries, and settings.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Key Benefits:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Consistency: Docker ensures that software will run the same regardless of where it&amp;rsquo;s deployed because containers encapsulate all dependencies.&lt;/li&gt;
&lt;li&gt;Isolation: Containers run in isolated environments, which makes it easier to manage dependencies and avoid conflicts.&lt;/li&gt;
&lt;li&gt;Portability: Containers can run on any system that supports Docker, including on-premises servers, public clouds, and personal machines.&lt;/li&gt;
&lt;li&gt;Efficiency: Docker containers are lightweight and have lower overhead compared to traditional virtual machines.&lt;/li&gt;
&lt;li&gt;Scalability: Docker makes it easy to scale applications horizontally by running multiple containers across different hosts.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;docker-compose&#34;&gt;Docker Compose&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Definition:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Docker Compose is a tool for defining and running multi-container Docker applications. It uses a YAML file to configure the application&amp;rsquo;s services, networks, and volumes, allowing you to manage multiple containers as a single application.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Key Benefits:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Simplified Configuration: Docker Compose uses a single YAML file (docker-compose.yml) to configure all your application&amp;rsquo;s services, making it easier to manage and understand.&lt;/li&gt;
&lt;li&gt;Multi-Container Management: It allows you to define, run, and manage multiple interconnected containers with a single command (docker-compose up).&lt;/li&gt;
&lt;li&gt;Environment Consistency: Ensures consistent environments across different stages of development, testing, and production by using the same configuration file.&lt;/li&gt;
&lt;li&gt;Networking: Automatically sets up a network so that the containers can communicate with each other without additional configuration.&lt;/li&gt;
&lt;li&gt;Volume Management: Simplifies the setup and management of data volumes that can be shared between containers.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;differences&#34;&gt;Differences&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Scope: Docker is used for single-container applications, whereas Docker Compose is designed for applications consisting of multiple containers.&lt;/li&gt;
&lt;li&gt;Usage: Docker commands (docker run, docker build, etc.) are used to manage individual containers, while Docker Compose commands (docker-compose up, docker-compose down, etc.) manage entire multi-container applications defined in a YAML file.&lt;/li&gt;
&lt;li&gt;Configuration: Docker uses Dockerfiles to define container images, while Docker Compose uses a docker-compose.yml file to define multi-container applications, including their networks and volumes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Combined Key Benefits&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Streamlined Development: Together, Docker and Docker Compose allow for rapid and consistent development, testing, and deployment of applications.&lt;/li&gt;
&lt;li&gt;Reproducibility: Both tools ensure that the environment in which the application runs is consistent across different stages, reducing the &amp;ldquo;it works on my machine&amp;rdquo; problem.&lt;/li&gt;
&lt;li&gt;Simplified CI/CD: Integration with CI/CD pipelines becomes easier, as containers can be used to run tests and deploy applications in a consistent environment.&lt;/li&gt;
&lt;li&gt;Resource Efficiency: Containers share the same OS kernel and can be more resource-efficient than virtual machines.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;practical-example&#34;&gt;Practical example&lt;/h3&gt;
&lt;p&gt;Suppose you have a web application with the following components:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A web server (e.g., Nginx)&lt;/li&gt;
&lt;li&gt;An application server (e.g., Node.js)&lt;/li&gt;
&lt;li&gt;A database (e.g., PostgreSQL)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;With Docker:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You create individual Dockerfiles for each component to containerize them.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;With Docker Compose:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You create a docker-compose.yml file to define all three services and their interactions.&lt;/li&gt;
&lt;li&gt;You can bring up the entire stack with a single command (docker-compose up).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;docker-installation&#34;&gt;Docker installation&lt;/h2&gt;
&lt;p&gt;First of all update system packages to the latest vesions:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo apt update &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt upgrade&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then install necessary packages:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo apt install apt-transport-https ca-certificates curl software-properties-common gnupg2&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add GPG public key for official Docker repository:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl -fsSL https://download.docker.com/linux/debian/gpg &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sudo apt-key add -&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add the Docker debian repository to apt package manager sources list:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;deb [arch=amd64] https://download.docker.com/linux/debian &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;lsb_release -cs&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; stable&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sudo tee /etc/apt/sources.list.d/docker.list&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Update package indexes and install Docker Community Edition:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo apt update &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt install docker-ce&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Enable and start the docker systemd daemon:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo systemctl &lt;span class=&#34;nb&#34;&gt;enable&lt;/span&gt; --now docker&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, verify the installation by running demo &lt;code&gt;hello-world&lt;/code&gt; container:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo docker run hello-world&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;docker-compose-installation&#34;&gt;Docker Compose installation&lt;/h2&gt;
&lt;p&gt;Download the latest release from official repository:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo curl -L &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;uname -s&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;uname -m&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; -o /usr/local/bin/docker-compose&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add execution permissions to the downloaded binary:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo chmod +x /usr/local/bin/docker-compose&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Verify the installition by printing out Docker Compose version:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker-compose --version&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In addition, you can create a test &lt;code&gt;docker-compose.yml&lt;/code&gt; file with a couple of demo services (for example web server and database):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;3&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;services&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;web&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;nginx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;80:80&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;database&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;postgres&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;environment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;POSTGRES_PASSWORD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;example&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;And then to start it use the command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker compose up&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;extras&#34;&gt;Extras&lt;/h2&gt;
&lt;p&gt;If you want to run docker or docker compose commands without sudo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo usermod -a -G docker &lt;span class=&#34;nv&#34;&gt;$USER&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;newgrp docker&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This example illustrates how to install Docker and Docker Compose on Debian system to complement each other in developing, deploying, and managing applications efficiently.&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
