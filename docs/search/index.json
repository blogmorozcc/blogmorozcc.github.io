[{"content":"Introduction This is my own guide for installing Arch Linux on bare metal machine with UEFI, encrypted LVM and separate /home partition.\nSteps First you need to create and boot the installation media on your PC, as the result you will boot into plain console.\nIncrease font size As most modern laptops/PCs have large resolution displays I recommend increasing the font size:\nsetfont ter-132b Setup the internet connection In this example I have a laptop with Wi-Fi modem, so I\u0026rsquo;ll be using iwd to setup the internet connection.\nRun iwd:\niwctl View a list of Wi-Fi adapters:\ndevice list Usually you should see one Wi-Fi device in output, in my case it is wlan0\nThen if you know the station SSID and password, simply connect to the station, and don\u0026rsquo;t forget to replace {SSID} with your actual value:\nstation wlan0 connect {SSID} Then exit the iwctl by typing exit, then do the ping 8.8.8.8 to ensure you are connected to the internet.\nSynchronize system clock timedatectl set-ntp true Partition your disk In my case I want to have separate root, /boot and /home partitions, moreover / and /home should be encrypted by LVM and be in the same volume group.\nDetect your drive First, we need to know what device to user, to view the disk devices use:\nfdisk -l In my case it is the NVMe SSD drive /dev/nvme0n1.\nPartitioning Next, use gdisk /dev/nvme0n1 to create partitions with this layout:\n/dev/nvme0n1p1 - at least 512M - type EF00 - EFI System Partition /dev/nvme0n1p2 - rest of disk - type 8309 - LUKS Format the physical partitions EFI Partition mkfs.vfat -F 32 /dev/nvme0n1p1 LUKS Encrypted partition cryptsetup luksFormat /dev/nvme0n1p2 Create volume group and logical volumes First, open the encrypted container:\ncryptsetup luksOpen /dev/nvme0n1p2 luks As the result the encrypted partition is mounted at /dev/mapper/luks.\nNext, treat /dev/mapper/luks as an LVM PV and create your volumes. In my case are like:\nVolume Group vg0 Logical Volume lv_root - Probably at least 20G, I use 75G Logical Volume lv_swap - Optional, maybe not desirable if you have an SSD Logical Volume lv_home - Rest of the space The commands to achieve this:\n1 2 3 4 5 pvcreate /dev/mapper/luks vgcreate vg0 /dev/mapper/luks lvcreate -L 75G -n lv_root vg0 lvcreate -L 16G -n lv_swap vg0 lvcreate -l100%FREE -n lv_home vg0 Format the logical volumes I will use ext4 filesystems for my setup, here you can use something different (like btrfs).\nTo format root and home partitions in ext4:\n1 2 mkfs.ext4 /dev/vg0/lv_root mkfs.ext4 /dev/vg0/lv_home To format the swap partition and enable it:\n1 2 mkswap /dev/vg0/lv_swap swapon /dev/vg0/lv_swap Mount the partitions This step is required to mount the created partitions and install the Arch Linux system there. All the filesystems should be mounted considering /mnt as a root filesystem for the future installed system.\n1 2 3 mount --mkdir /dev/vg0/lv_root /mnt mount --mkdir /dev/vg0/lv_home /mnt/home mount --mkdir /dev/nvme0n1p1 /mnt/boot Install the base system pacstrap -K /mnt base base-devel linux linux-firmware linux-headers Generate the fstab file genfstab -U /mnt \u0026gt;\u0026gt; /mnt/etc/fstab Chroot into your system arch-chroot /mnt Generate locale Uncomment en_US.UTF-8 UTF-8 and other needed locales in file /etc/locale.gen.\nThen generate locales:\nlocale-gen To set the system locale:\necho \u0026#34;LANG=en_US.UTF-8\u0026#34; \u0026gt; /etc/locale.conf Setup the hostname This is actually the analog of computer name in Windows, in my case I will name it thinkpad.\necho \u0026#34;thinkpad\u0026#34; \u0026gt; /etc/hostname Also add the default values to the /etc/hosts file:\n1 2 3 4 # Static table lookup for hostnames. # See hosts(5) for details. 127.0.0.1 localhost ::1 localhost Setup TimeZone My timezone is Europe/Kiev, so in my case this sumlink should be created:\nln -s /usr/share/zoneinfo/Europe/Kiev /etc/localtime And also I recommend switch the BIOS hardware clock to UTC:\nhwclock --systohc --utc Setup initramfs Install the lvm2 package:\npacman -S lvm2 Edit the /etc/mkinitcpio.conf file and insert hooks encrypt and lvm2 strictly in this order between the block and filesystems hooks like this:\nHOOKS=(base udev ... block encrypt lvm2 filesystems) Then re-generate the initramfs:\nmkinitcpio -P Create a user and credntials First it is recommended to change the root user password:\npasswd root Then install sudo package to allow your user grant privileges:\npacman -S sudo Then edit the sudoers file:\nsudo EDITOR=nano visudo And uncomment the line %wheel ALL=(ALL:ALL) ALL and save the file.\nCreate a user, change the password and add it to the necessary groups:\n1 2 3 useradd -m shifthackz passwd shifthackz usermod -aG wheel,audio,video,storage shifthackz Install the needed packages and desktop environment This is optional step and you may do the same after install, but I\u0026rsquo;d like to be able to use the DE straigt after install.\nIn this example I will install Gnome DE (on Wayland and PipeWire) with NetworkManager.\npacman -S gnome networkmanager gnome pipewire \\ pipewire-alsa pipewire-pulse pipewire-jack \\ wireplumber bluez bluez-utils Then start the needed services by default\n1 2 3 systemctl enable NetworkManager systemctl enable gdm systemctl enable bluetooth Install the bootloader I will use systemd-boot as my bootloader, to install it, run:\nbootctl install Then create the bootloader config at /boot/loader/loader.conf containing this:\n1 2 3 4 default @saved timeout 3 console-mode max editor no To load your CPU microcode early at bootloader install amd-ucode or intel-ucode package, in my case I have Intel CPU, so command is:\npacman -S intel-ucode Then detect the UUID of your LVM encrypted partition (in my case /dev/nvme0n1p2):\nblkid /dev/nvme0n1p2 Then create the boot entry for your Arch Linux system at /boot/loader/entries/arch.conf, make sure to replace the UUID and correct root partition in the options parameter:\n1 2 3 4 5 title Arch Linux linux /vmlinuz-linux initrd /intel-ucode.img initrd /initramfs-linux.img options cryptdevice=UUID=b574960c-1d6a-4363-bd8a-0e7345f23e06:luks root=/dev/vg0/lv_root rw Finally check the bootctl and validate that the config is correct in bootctl list.\nReboot to your new system To reboot you need:\ntype exit to exit the chroot shell. then do umount -R /mnt to unmount your partitions. finally type reboot ","date":"2024-02-24T00:00:00Z","image":"https://blog.moroz.cc/post/arch-linux-install-guide-uefi--encrypted-lvm/header_hue96a0cab901c05107ef04317fe9cfdbe_381439_120x120_fill_box_smart1_3.png","permalink":"https://blog.moroz.cc/post/arch-linux-install-guide-uefi--encrypted-lvm/","title":"Arch Linux install guide (UEFI + encrypted LVM)"},{"content":"Introduction Usually WPS Office offers one of the best compatibility on Linux with weird proprietary ms office document formats including document with some complex formatting and formulas. But in order for the formulas to display correctly some custom fonts required, and by default they are missing on most of the Linux system. In that case after launching the WPS Office you will see the error message saying:\nSome formula symbols might not be displayed correctly due to missing fonts Symbol, Wingdings, Wingdings 2, Wingdings 3, Webdings, MT Extra.\nFix the fonts issue To fix the issue you just need to download the missing and install them in your Linux system.\nDownload fonts files Download needed fonts and save them in some folder. You can just click on every file below to download it:\nWEBDINGS.TTF WINGDNG2.ttf WINGDNG3.ttf mtextra.ttf symbol.ttf wingding.ttf Install downloaded fonts Create a folder that is required for formula fonts, by typing this command in the terminal:\nsudo mkdir -p /usr/share/fonts/kingsoft Then copy downloaded files to destination folder:\n1 2 3 4 5 6 sudo cp WEBDINGS.TTF /usr/share/fonts/kingsoft sudo cp WINGDNG2.ttf /usr/share/fonts/kingsoft sudo cp WINGDNG3.ttf /usr/share/fonts/kingsoft sudo cp mtextra.ttf /usr/share/fonts/kingsoft sudo cp symbol.ttf /usr/share/fonts/kingsoft sudo cp wingding.ttf /usr/share/fonts/kingsoft And make your user the owner of the folder:\nsudo chown -R $USER:$USER /usr/share/fonts/kingsoft Invalidate the font cache To invalidate your system font cache, run this command:\nsudo fc-cache -vfs Conclution After necessary fonts are installed close all the WPS office processes and try to launch it again, the error should not be shown after launch, and you should be able to use formula formatting.\n","date":"2023-12-15T00:00:00Z","image":"https://blog.moroz.cc/post/fix-missing-formula-fonts-for-wps-office-on-linux/header_huca727e626e0e83a19f41e4803138b60e_99475_120x120_fill_box_smart1_3.png","permalink":"https://blog.moroz.cc/post/fix-missing-formula-fonts-for-wps-office-on-linux/","title":"Fix missing formula fonts for WPS Office on Linux"},{"content":"Introduction It\u0026rsquo;s neat to have a laptop with both WiFi and LTE, as this actually provides a reserved connectivity channel. ThinkPads are generally well-supported on Linux, and many users successfully use LTE modems on these laptops without any additional configuration. However, some newer models are bundled with Quectel LTE modems that have FCC lock.\nFCC Lock What is FCC Lock The FCC lock is a software lock integrated in WWAN modules shipped by several different laptop manufacturers like Lenovo, Dell, or HP. This locks prevents the WWAN module from being put online until some specific unlock procedure (usually a magic command sent to the module) is done. You can read more details about the FCC lock/unlock procedure here.\nHow OS handles FCC Unlock On Windows based system FCC unlock is usually done by the driver provided by modem or laptop manufacturer. On Linux systems Modem Manager is used to operate the WWAN modem, and actually has some pre-defined scripts for certain well-known WWAN modems. In some cases manufacturer provides the FCC unlock scripts, especially when it comes to ThinkPads that are designed to be Linux-compatible in the first place. But as each modem has different way of FCC unlock procedure, the FCC unlock procedure is not enabled by default and user should manually enable FCC unlock script for the exact modem model and revision. This is the reason why LTE does not work out-of-box in Linux system, which may confuse some users.\nFCC Unlock example I have Lenovo ThinkPad X13 Gen2 with Intel CPU running Arch Linux, so this example shows how to perfom FCC unlock procedure with this exact laptop and OS environment. This procedure is quite similar for other Lenovo ThinkPad series laptops, but with your equipment procedure may be slightly different, so consider investigating manufacturer website or special forums regarding your exact hardware.\nDetect WWAN modem model First of all let\u0026rsquo;s detect the exact model of LTE modem that is installed in laptop. This can be done with terminal command:\nlspci It will actually print all the PCI devices in your system and you can look for the LTE modem in the output. In my case LTE modem was the last in the output.\n1 2 3 ... 08:00.0 Unassigned class [ff00]: Quectel Wireless Solutions Co., Ltd. EM120R-GL LTE Modem ... Install Modem Manager package Make sure you have installed modemmanager package, because it\u0026rsquo;s essential requirement to have it in order for LTE connectivity to work on your Linux system.\nDepending on your distribution, install command may be different.\nFor Arch-based systems: sudo pacman -S modemmanager For Debain-based systems: sudo apt install modemmanager For Fedora-based systems: sudo dnf install modemmanager After that enable the ModemManager.service in systemd, it can be done with command:\nsudo systemctl enable --now ModemManager.service Find the FCC Unlock script This step requires investiagting online to get the FCC Unlock script from the manufacturer. If there is no script from the manufacturer try to look on some forum pages or subreddits regarding your laptop/modem.\nIn my case I have Quectel EM120R-GL WWAN modem, and luckily the FCC unlock script is bundled with Modem Manager itself. I found the location of pre-defined script on this page.\nThe location of the pre-defined script for my modem is /usr/share/ModemManager/fcc-unlock.available.d/1eac:1001, and to make FCC unlock performing automatically with start of the ModemManager.service it\u0026rsquo;s enough to link this script to the /etc/ModemManager/fcc-unlock.d, so the command to do so look like:\nsudo ln -snf /usr/share/ModemManager/fcc-unlock.available.d/1eac:1001 /etc/ModemManager/fcc-unlock.d After this you can restart ModemManager.service:\nsudo systemctl restart ModemManager.service and try to connect to your LTE network, in case it not works try rebooting your computer.\nConnecting to the LTE network To perform connection to the LTE networks you can either use modemmanager in your terminal, or use some graphical settings tools provided by NetworkManager in KDE/Gnome. You can read detailed info how to perform mobile broadband connections on this arch wiki page.\nI will show both terminal and graphical way on my system.\nTerminal only method First you need to know the index of the WWAN modem. To do this, list all the available WWAN modems using mmcli like this:\nmmcli -L In the output look for the string /org/freedesktop/ModemManager1/Modem/1, the modem index is at the end, in my case it is 1. So this index should be used in all the below commands.\nNext, you can try connecting to LTE network, but you need to know what settings are required for your Internet Service Provider to perform connection. In my case only apn=internet is enough, so command to connect is:\nmmcli -m 1 --simple-connect=\u0026#34;apn=internet\u0026#34; If connection successful, try browsing the internet, or just do ping 8.8.8.8 in terminal to ensure you are online.\nAfter you done browsing, you can disconnect from LTE network using command:\nmmcli -m 1 --simple-connect=\u0026#34;apn=internet\u0026#34; Graphical method This method requires to have use desktop environment like KDE or Gnome, and have NetworkManager as the primary way of network setup in your Linux system. In this example I will show how to setup it on KDE Plasma 5.27.10.\nFirst of all go to the System Settings app, and open the Connections section.\nPress the + add button, and select Mobile Broadband connection type in the opened dialog.\nIn the next dialog you can select specific modem for this connection, but as I have only one WWAN modem in my system, I will leave Any GSM device selection as is.\nNext, select your ISP provider country.\nSelect your ISP provider, or you can enter the name manually if it\u0026rsquo;s not listed.\nOn this step select your tariff plan, and ensure you enter correct APN, in my case it is \u0026ldquo;internet\u0026rdquo;.\nAfter all the information was entered, you should see success window.\nKDE makes it easy to connect the LTE network and monitor its\u0026rsquo; state from the tray icon. Find the profile you just created and click connect, when you are online it should display connected status like on screenshot.\nConclusion So if you don\u0026rsquo;t have your LTE modem working out-of-box after installing Linux consider checking if it has FCC lock and look online for the unlock script. In case you have exactly the same Quectel EM120R modem like I have, you can just use the same FCC script from example.\n","date":"2023-12-13T00:00:00Z","image":"https://blog.moroz.cc/post/how-to-make-thinkpad-lte-modem-work-on-arch-linux-using-fcc-unlock/header_hu2d109c230a8b683de6314808740ea101_247945_120x120_fill_q75_box_smart1.jpg","permalink":"https://blog.moroz.cc/post/how-to-make-thinkpad-lte-modem-work-on-arch-linux-using-fcc-unlock/","title":"How to make ThinkPad LTE Modem work on Arch Linux using FCC unlock"},{"content":"Introduction Zsh, or Z Shell, is a powerful and feature-rich command-line shell for Unix-like operating systems, including Linux and BSD (Berkeley Software Distribution). It is an extended version of the Bourne Shell (sh) with numerous improvements and additional features. Zsh aims to provide a more interactive and user-friendly experience for shell users.\nHere are some reasons why Zsh is often considered one of the best shells for Unix/Linux/BSD systems:\nCommand Line Editing: Zsh offers advanced command-line editing capabilities, allowing users to navigate and edit commands with ease. It supports features like history expansion, spelling correction, and advanced pattern matching.\nCustomization: Zsh is highly customizable. Users can configure various aspects of the shell\u0026rsquo;s behavior, such as prompt appearance, key bindings, and completion options. The extensive configuration options make it adaptable to individual preferences and workflows.\nPowerful Tab Completion: Zsh provides powerful and context-aware tab completion, making it easier to navigate the file system and complete command names and arguments. It can complete not only commands but also file paths, variables, and more.\nPlugins and Extensions: Zsh supports plugins and extensions that enhance its functionality. Tools like Oh-My-Zsh and Prezto are popular frameworks that make it easy to manage Zsh configurations and add additional features through plugins.\nAdvanced Globbing: Zsh supports advanced globbing patterns, which provide more flexibility and power when specifying file paths or matching patterns. This makes it easier to perform complex file operations directly from the command line.\nSpelling Correction: Zsh has a built-in spelling correction feature that helps users avoid typos. If you mistype a command or file path, Zsh can suggest corrections.\nInteractive Features: Zsh includes interactive features that improve the overall user experience, such as the ability to navigate command history easily, search through previous commands, and reuse or modify commands efficiently.\nCompatibility with Bourne Shell: Zsh is compatible with the Bourne Shell (sh) syntax, making it a suitable replacement for sh or Bash. Existing shell scripts are likely to work in Zsh without modification.\nWhile Zsh offers a rich set of features, the choice of the \u0026ldquo;best\u0026rdquo; shell often depends on individual preferences and specific use cases. Other popular shells include Bash (Bourne Again SHell) and Fish (Friendly Interactive SHell), each with its own strengths and characteristics. Ultimately, the best shell is the one that aligns with your workflow and meets your specific requirements.\nInstallation Install ZSH package To install ZSH package in your Linux system consider using the package manager provided with your distribution. It is done differently depending on your distribution, for example:\nFor Arch Linux:\nsudo pacman -S zsh For Fedora, Red Hat:\nsudo dnf install zsh For Debian, Ubuntu, Linux Mint, ElementaryOS:\nsudo apt install zsh In my case, I am installing it for Arch Linux, for example:\nMake ZSH your default shell To make the new installed ZSH the default for your user, type the command below, and enter your user password for confirmation:\nchsh -s $(which zsh) After that it is recommended to reboot your system, on next reboot the ZSH shell will be used for your user. To reboot your Linux computer you can use command sudo reboot or just use GUI of your desktop environment to perform reboot.\nPerform the initial configuration Once you open the terminal application after reboot zsh will prompt you to create the default configuration files. To apply the initial configuration press \u0026ldquo;0\u0026rdquo; on the keyboard.\nInstall Oh My ZSH Oh My Zsh is an open-source framework and configuration manager for Zsh, the Z Shell. It was created to make it easier for users to manage their Zsh configurations and enhance their command-line experience. Oh-My-Zsh provides a collection of plugins, themes, and helper functions that can be easily integrated into Zsh, allowing users to customize and extend the functionality of their shell environment.\nTo install ZSH the most easy way is to use installation script from the Oh My Zsh GitHub Repository. It is possible to execute the installation script by downloading it, like this:\nsh -c \u0026#34;$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)\u0026#34; After script finishes, you should see Oh My Zsh installed like on screenshot below.\nModify Oh My ZSH theme Oh My Zsh has a plenty of pre-installed themes that are located in ~/.oh-my-zsh/themes/ folder.\nYou can modify your .zshrc file and use pre-installed theme.\nnano .zshrc And to change your theme to agnoster for example, find ZSH_THEME paramater and change it like this:\nZSH_THEME=\u0026#34;agnoster\u0026#34; Install custom Oh My ZSH theme Personally for me Powerlevel10k is the most liked among the others, so in this example I will demonstrate how to install it.\nInstall compatible terminal font In order for this custom theme to be able to correctly display some characters, your terminal should use a custom compatible fon Meslo LGS NF. To to this you can follow the instructions from the GitHub repository.\nThe most simple way is download and 4 font files:\nMesloLGS NF Regular.ttf MesloLGS NF Bold.ttf MesloLGS NF Italic.ttf MesloLGS NF Bold Italic.ttf To make them available system wide move those 4 files to /usr/share/fonts folder:\n1 2 3 4 sudo mv \u0026#34;MesloLGS NF Regular.ttf\u0026#34; /usr/share/fonts sudo mv \u0026#34;MesloLGS NF Bold.ttf\u0026#34; /usr/share/fonts sudo mv \u0026#34;MesloLGS NF Italic.ttf\u0026#34; /usr/share/fonts sudo mv \u0026#34;MesloLGS NF Bold Italic.ttf\u0026#34; /usr/share/fonts Finally, to flush the font cache, execute the command:\nsudo fc-cache The last step is to change the font of your terminal. It can depend on the terminal you are using, but usually you can just modify it in the terminal graphical settings. In my case I set it up to use Meslo LGS NF Regular 12.\nInstall Powerlevel10k theme First download the Powerlevel10k theme to your custom themes directory, it can be done easily just with one command:\ngit clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k Then modify your .zshrc file:\nnano .zshrc and set ZSH_THEME parameter to be equal to powerlevel10k/powerlevel10k:\nZSH_THEME=\u0026#34;powerlevel10k/powerlevel10k\u0026#34; After you saved the file, use the command below to apply the changes:\nsource ~/.zshrc Complete Powerlevel10k configuration wizard The first time new custom Powerlevel10k is running, the Powerlevel10k theme configuration wizard will start. You can always start this wizard again by using p10k configure terminal command. The wizard has several steps, just press corresponding keyboard keys to answer. I will show below how the configuration looks like in my case.\n1. Confirm that several font symbols are displayed correctly. I just answered yes to those questions (by pressing \u0026ldquo;y\u0026rdquo; on keyboard), because everything in terms of symbol rendering was displayed correctly.\n2. Setup theme style All the options in this section allow to modify the design of the theme according to your personal preferences. I will show what answers I typed into the wizard in case you want to replicate the exact theme behavior from this guide.\nThe prompt style setting will allow to setup the main look and feel, I answered 3 here. The character set is important setting, and actually Unicode allows to display more symbols, so I highly recommend answer 1 here. This setting allows to show or hide current time in terminal. I see no practical use in this, so I answered n here. The next settings are all about the look and feel of the theme, you can choose whatever you personally like.\nThe instant prompt feature allows to reduce the loading times of the ZSH shell, so I highly recomment to enable it by answering 1 here. The last step is to apply changes to .zshrc, just answer y here. If everything was set up right, you will see your new shell theme.\nEnable built-in Oh My ZSH plugins Zsh supports plugins and extensions that enhance its functionality. Oh-My-Zsh makes it easy to manage Zsh configurations and add additional features through plugins.\nTo view a list of plugins that is bundeled with Oh My ZSH, you can type a command:\nls -a ~/.oh-my-zsh/plugins/ In my case I have those plugins:\nThen you can modify your .zshrc file:\nnano .zshrc and set plugins parameter to load the plugins you need, in my case as an Android Developer I need git and adb plugins:\nplugins=(git adb) Then apply the changes to your shell:\nsource ~/.zshrc Installing custom plugins Also Oh My ZSH allows you to install and user third party plugins. For example let\u0026rsquo;s install zsh-autosuggestions plugins to have some nice recommendations for input commands based on history.\nInstalling is very similar to installing a custom theme. First, clone the plugin into the custom plugins directory.\ngit clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions Then you can modify your .zshrc file the same way as I shown in the article section above, so in the result you will have:\nplugins=(git adb zsh-autosuggestions) Then apply the changes to your shell:\nsource ~/.zshrc After that try to type something, and you should see some suggestion. For example I typed \u0026ldquo;neo\u0026rdquo;, and the plugin suggests to use \u0026ldquo;neofetch\u0026rdquo;:\nEnabling auto updates Oh-My-Zsh has a built-in update mechanism to help users keep their installation up-to-date with the latest changes, enhancements, and bug fixes contributed by the community. Also it provides a way for automatic updates, but it is disabled by default.\nTo configure automatic updates you should set this directive in .zshrc file:\nzstyle \u0026#39;:omz:update\u0026#39; mode auto Conclusions So ZSH is more feature rich shell that can make you work more efficient with extending the shell functionality with custom plugins, so it can be considered as a better alternative to bash that is the default shell in any modern Linux distribution.\n","date":"2023-11-26T00:00:00Z","image":"https://blog.moroz.cc/post/how-to-install-and-configure-zsh-shell-in-linux/header_hu6914af8cdb8921216861b6ef227624ec_122422_120x120_fill_q75_box_smart1.jpg","permalink":"https://blog.moroz.cc/post/how-to-install-and-configure-zsh-shell-in-linux/","title":"How to install and configure ZSH shell in Linux"},{"content":"Introduction When using systemd-boot as your bootloader, you may find it convenient to have the system remember the last selected entry on each subsequent boot. This is especially useful for users who frequently switch between different operating systems or kernels. By configuring systemd-boot to remember the last chosen boot entry, you can streamline the boot process and avoid having to manually select the desired option every time the system restarts.\nModifying the Configuration File To achieve this functionality, you need to modify the loader.conf configuration file. The exact location of this file can vary depending on the Linux distribution you are using.\nPersonally, I have used several Linux distributions, and the path for loader.conf was different in each of them, for example:\nFor Ubuntu it was /boot/efi/loader/loader.conf For Arch Linux it was /boot/loader/loader.conf For EndeavourOS it was /efi/loader/loader.conf To modify the file open the Terminal and follow this steps:\nOpen the loader.conf file for editing, for example: sudo nano /boot/loader/loader.conf Modify the default parameter like below: default @saved Save the file (In nano, this is done with the keyboard shortcut `Ctrl + O\u0026rsquo;). At the next boot, after you will select some entry it will be remembered as the default.\nConclusions By configuring systemd-boot to remember the last selected entry, you can streamline your boot process and enhance the overall user experience. Whether you\u0026rsquo;re using Arch Linux, Ubuntu, or another distribution that employs systemd-boot, this simple modification can save you time and make your system startup more efficient.\nRemember to adapt the file paths and commands based on the specifics of your distribution. With this configuration in place, your system will automatically boot into the last chosen entry, reducing the need for manual intervention during the boot process.\n","date":"2023-11-22T00:00:00Z","image":"https://blog.moroz.cc/post/how-to-make-systemd-boot-remember-the-last-selected-entry/header_hu0e765b8aca8d9ba54a80770b06516939_1619_120x120_fill_box_smart1_3.png","permalink":"https://blog.moroz.cc/post/how-to-make-systemd-boot-remember-the-last-selected-entry/","title":"How to make systemd-boot remember the last selected entry"},{"content":"Introduction Currently, there are many platforms for online video content streaming, such as YouTube, Twitch, and others. They use the RTMP protocol (Real-Time Messaging Protocol) to broadcast streaming video over the Internet. While these platforms have powerful video streaming capabilities, in some cases independence from the streaming platform and its rules makes perfect sense.\nIn this article, I will provide instructions on the deployment of the RTMP service based on Nginx-RTMP, which will allow receiving an RTMP stream from the streamer\u0026rsquo;s computer, and converting it to modern HLS and DASH formats for viewing in the receiver program.\nPrerequisites To deploy the RTMP service, you need to have:\nA clean virtual machine or physical server based on the Linux OS. A computer for streaming. To work outside the local network, in the global Internet:\nDedicated IP address. Domain. The instructions will use a VPS based on Debian 11.\nWorking with Nginx-RTMP Installation First of all, you need to install nginx and libnginx-mod-rtmp packages. To do this, you need to execute the following commands:\n1 2 sudo apt update sudo apt install nginx libnginx-mod-rtmp Set up RTMP service Once installed, you need to configure the Nginx web server to listen on port 1935 to receive the RTMP stream. To do this, you need to edit the file /etc/nginx/nginx.conf:\nsudo nano /etc/nginx/nginx.conf At the end of the file, you need to add the configuration of the RTMP server:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 ... rtmp { server { listen 1935; chunk_size 4096; allow publish 127.0.0.1; allow publish 192.168.0.0/24; deny publish all; application live { live on; record off; hls on; hls_path /var/www/html/stream/hls; hls_fragment 3; hls_playlist_length 60; dash on; dash_path /var/www/html/stream/dash; } } } ... An explanation of the important aspects of this configuration:\nlisten 1935 - specifies the port on which the RTMP server is running. chunk_size 4096 - sets the block size, 4 KB each. allow publish [IP / Subnet] - each line specifies an IP or subnet that is allowed to send the RTMP stream to the server. deny publish all - prohibits receiving RTMP stream from all other addresses/networks. application live - configuration for converting RTMP to HLS and DASH formats, where hls_path and dash_path indicate paths to directories for placing playlists. live on - allows you to receive data via a video stream. record off - disables recording of the video stream to a file on the disk. Set up streaming HLS, DASH Next, you need to deploy a virtual host that will allow access to HLS or DASH streams via the HTTP/HTTPS protocol.\nFirst, you need to create two directories for storing video stream fragments for HLS and DASH:\n1 2 sudo mkdir -p /var/www/html/stream/hls sudo mkdir -p /var/www/html/stream/dash And also establish the owner and rights:\n1 2 sudo chown -R www-data:www-data /var/www/html/stream sudo chmod -R 755 /var/www/html/stream For the virtual host to work, you need to create a new configuration file (for example rtmp) in the /etc/nginx/sites-available directory:\nsudo nano /etc/nginx/sites-available/rtmp The rtmp host file consists of the following:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 server { listen 443 ssl; listen 80; server_name rtmp.yourdomain.com; ssl_certificate /etc/ssl/yourdomain.crt; ssl_certificate_key /etc/ssl/yourdomain.key; ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2; location / { add_header Access-Control-Allow-Origin *; root /var/www/html/stream; } } types { application/dash+xml mpd; } Explanation for this configuration:\nReplace rtmp.yourdomain.com with your domain. If you want to use SSL, also write the certificate and key files under the paths /etc/ssl/yourdomain.crt and /etc/ssl/yourdomain.key. If you don\u0026rsquo;t want to use SSL, remove the lines starting with ssl and listen 443 ssl from the file. In order for all the configurations to take effect, you need to enable the virtual host and restart Nginx:\n1 2 sudo ln -s /etc/nginx/sites-available/rtmp /etc/nginx/sites-enabled/ sudo service nginx restart Broadcasting in OBS Studio The best suited program for broadcasting is OBS Studio.\nFirst of all, it is necessary to create a scene, adjust the sound, and the appearance of the broadcast.\nTo configure streaming parameters, you need to go to Settings and select the Stream tab. The following parameters must be set there:\nService: Custom Server: rtmp://rtmp.yourdomain.com/live (instead of domain, you can specify IP, for example http://11.22.33.44/live) Stream Key: obs_stream Example settings:\nTo start a video broadcast, you need to click Start Streaming in the main window of the program:\nViewing the broadcast The broadcast can now be viewed using any application that supports the HLS and DASH protocols. The easiest way would be to watch in VLC by opening the link to the stream.\nTo begin with, let\u0026rsquo;s understand how a link to streams is formed in the configured service:\nHLS: {protocol}://{domain}/hls/{stream key}.m3u8 DASH: {protocol}://{domain}/dash/{stream key}.mpd For example, if you deployed a service at the address rtmp.yourdomain.com that uses SSL, and in the OBS settings you specified the obs_stream key, then in this case the links will be as follows:\n1 2 https://rtmp.yourdomain.com/hls/obs_stream.m3u8 https://rtmp.yourdomain.com/dash/obs_stream.mpd To view in VLC, you need to press Ctrl + N, or go to the menu Media \u0026gt; Open Network Stream, specify a link to one of the formats, and press Play.\nConclusions In this way, you can create your own broadcasting service, which will be independent of popular services.\nAdvantages of such a solution:\nPrivacy and full control over the infrastructure, guarantee that the flow data is not stored. You do not need to follow the rules of the service (for example, a ban on broadcasting certain content). But there are certain disadvantages:\nSuch a solution requires certain server resources. The owner needs to spend time and money on maintaining and maintaining the security of his infrastructure. ","date":"2022-07-20T00:00:00Z","image":"https://blog.moroz.cc/post/deploying-an-rtmp-server-for-streaming-using-nginx-rtmp/header_hu41968337912a42023606e3de60723367_1230034_120x120_fill_q75_box_smart1.jpeg","permalink":"https://blog.moroz.cc/post/deploying-an-rtmp-server-for-streaming-using-nginx-rtmp/","title":"Deploying an RTMP server for streaming using Nginx RTMP"},{"content":"Introduction Tor is an open source software complex that connects certain computers around the world into a system of proxy servers, the connections between which are made according to the bulb routing scheme. This allows users of this network to establish an anonymous connection that is protected from eavesdropping.\nThe main purpose of the Tor network today is to provide anonymity for Internet users, allowing you to hide your identity while browsing sites from ISPs, site owners, advertising robots, automated traffic analysis systems, etc. This is achieved due to a large distributed system of servers - nodes, traffic between which is routed at the network level according to the OSI model.\nRoles of Tor network subjects Knowing that the network consists of server-nodes connected to the bulb network, let\u0026rsquo;s consider which nodes are in the Tor network:\nEntry Node (Entry Node) The input node is the first link in the connection chain. It initiates the establishment of a secure connection by accepting packets from a Tor user, encrypts them, and forwards them to the next node. Note that interception of data between the user and the input node is impossible, since each block is encrypted with a session key using hybrid encryption.\nMiddle Node The task of these nodes is reduced only to receiving data from the previous node, encrypting it and transmitting it to the next one. From such a site, it is impossible to go outside the Tor network to the Internet. From such a node, you can only get to the site of the intranet domain .onion, no more. But these nodes are very important to keep the network functioning: the more intermediaries in the chain, the higher the anonymity, and the probability of your connection being compromised decreases. In addition, it is impossible to establish through which intermediary nodes your chain passes, since the IP addresses of such nodes are not recorded in the log file.\nExit Node This is the last node in the Tor chain. It decodes the packets transmitted by the user along the entire chain and transmits the data to the requested remote server on the Internet. A connection from the IP address of the source node will be registered on the requested server. These types of nodes are the weakest point of the Tor network, as there are ways to intercept user data between the origin node and the remote server. Also, a volunteer who has launched an Exit Node exposes himself to the risk of problems, since it is his IP that is fixed by Internet resources.\nBridge Relay These are repeaters whose addresses are publicly available. They are used to initiate connections in places where Tor root server addresses are blocked. You can get the address of the bridge node by accepting an e-mail from TheTorProject with a special request. Thus, even a total blocking of all publicly known addresses of Tor network nodes will not give any result, since it will not affect the availability of classified relays.\nExit Enclave A relay used by site owners to create a mirror of their resource on the Tor network. This will allow users of some countries to bypass blocking, and the rest to maintain anonymity, protecting themselves again from interception of traffic from the source node.\nWhat the chain between the user and the final Internet resource looks like is shown in the diagram below:\nFeatures of Tor Also, Tor, since 2004, can provide anonymity for servers as well. Each network user can host any service, the so-called .onion internal domain, which consists of a random set of characters. Such a service will be available only from the Tor network, and neither users will be able to find out about the public IP of the hidden site, nor the site administrator will be able to know who its visitors are. Only the fact of visiting the site and the specific directory visited by the user will be available in the server logs.\nBut you need to be careful when using Tor, because it has the following features that should be kept in mind when using Tor:\nThe input node knows the user\u0026rsquo;s IP address; The message is fully decoded at the source node, but the sender is unknown; On the requested remote server, some technical data about the sender is transmitted along with the package, although the sender is essentially unknown; Packets with your message may pass through nodes that were launched by attackers in order to steal your data; The Internet resource can obtain data about the user\u0026rsquo;s PC configuration and OS version, as well as his IP address by executing JavaScript, Flash, ActiveX scripts on the page; On the way from the source node to the final server, data can be changed due to a Man-In-The-Middle attack, so if, for example, you download a file through Tor, always check its hash sums; The owner of the source node can steal your session, cookies, and even logins and passwords by intercepting data using SSL Strip; Since the IP addresses of the outgoing nodes are publicly available, some Internet providers and sites block them (for example, Google, VK); Conclusions We can conclude that the Tor network has great value for those who are subject to mass surveillance, for those who value freedom on the Internet, for those who do not want to put up with large-scale senseless blocking, for those who want at least a small island of anonymity .\nBe careful on the internet, because it\u0026rsquo;s possible that right now, as you read this, someone is watching your traffic 😱.\n","date":"2016-10-07T00:00:00Z","image":"https://blog.moroz.cc/post/how-the-tor-network-actually-works/header_hu447e204f4d18572619e9ad6f34ad1dde_86330_120x120_fill_q75_box_smart1.jpg","permalink":"https://blog.moroz.cc/post/how-the-tor-network-actually-works/","title":"How the Tor network actually works"},{"content":"Introduction Mega.nz is one of the most affordable cloud storage in terms of volume, because it provides its new users with 50Gb of cloud disk space absolutely free. There are also paid plans that allow you to expand the cloud up to 4 terabytes. But even 50Gb is quite enough for backup copies of sites and MySQL databases. Also, there is a set of megatools console utilities for downloading and uploading files to a remote cloud.\nSolution setup Installing megatools First, register and activate your mega.nz account if you don\u0026rsquo;t already have one.\nNext, you need to connect to the server via SSH, and install the necessary packages for assembling megatools:\nsudo apt-get -y install build-essential libglib2.0-dev libssl-dev libcurl4-openssl-dev libgirepository1.0-dev After that, you should find a link to download megatools on the official website, which we then use to download with the wget command.\n1 2 3 cd /opt wget https://megatools.megous.com/builds/megatools-1.9.97.tar.gz tar -xvzf megatools-1.9.97.tar.gz After we have downloaded and unzipped the source code, we need to compile it. This can be done using the following sequence of commands:\n1 2 3 4 cd megatools-1.9.97 ./configure make make install If everything was compiled and installed without errors, you can proceed to the next stage, namely writing a script for creating and uploading backups to the cloud.\nCreating a backup script First, we create a file with data for logging into the account:\n1 2 cd ~ nano .megarc The file should be filled as follows:\n1 2 3 [Login] Username = {Your login} Password = {Your password} As our login data is stored unencrypted, let\u0026rsquo;s make it available only to root.\nchmod 640 .megarc Now let\u0026rsquo;s check the correctness of entering the login and password, for this we enter the command:\nmegals If all settings are correct, it should display a list of files. If the command did not display a list of files, then we check the correctness of entering the password, if it did, then we proceed to the next step of creating a backup script. In this case, the scripts are stored in the /opt/scripts directory with modified permissions.\nnano /opt/scripts/do_backup.sh The script looks like this:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 #!/bin/bash SERVER=\u0026#34;server\u0026#34; DAYS_TO_BACKUP=7 WORKING_DIR=\u0026#34;/root/tmp_dir\u0026#34; BACKUP_MYSQL=\u0026#34;true\u0026#34; MYSQL_USER=\u0026#34;{Your MySQL user}\u0026#34; MYSQL_PASSWORD=\u0026#34;{Your MySQL password}\u0026#34; DOMAINS_FOLDER=\u0026#34;/var/www\u0026#34; ################################## # We create a temporary folder for creating archives rm -rf ${WORKING_DIR} mkdir ${WORKING_DIR} cd ${WORKING_DIR} # Archive /etc cd / tar cJf ${WORKING_DIR}/etc.tar.gx etc cd - \u0026gt; /dev/null # Backup MySQL if [ \u0026#34;${BACKUP_MYSQL}\u0026#34; = \u0026#34;true\u0026#34; ] then mkdir ${WORKING_DIR}/mysql for db in $(mysql -u${MYSQL_USER} -p${MYSQL_PASSWORD} -e \u0026#39;show databases;\u0026#39; | grep -Ev \u0026#34;^(Database|mysql|information_schema|performance_schema|phpmyadmin)$\u0026#34;) do #echo \u0026#34;processing ${db}\u0026#34; mysqldump --opt -u${MYSQL_USER} -p${MYSQL_PASSWORD} \u0026#34;${db}\u0026#34; | gzip \u0026gt; ${WORKING_DIR}/mysql/${db}_$(date +%F_%T).sql.gz done #echo \u0026#34;all db now\u0026#34; mysqldump --opt -u${MYSQL_USER} -p${MYSQL_PASSWORD} --events --ignore-table=mysql.event --all-databases | gzip \u0026gt; ${WORKING_DIR}/mysql/ALL_DATABASES_$(date +%F_%T).sql.gz fi # Backup websites mkdir ${WORKING_DIR}/domains for folder in $(find ${DOMAINS_FOLDER} -mindepth 1 -maxdepth 1 -type d) do cd $(dirname ${folder}) tar cJf ${WORKING_DIR}/domains/$(basename ${folder}).tar.xz $(basename ${folder}) cd - \u0026gt; /dev/null done ################################## # Handling possible dbus-errors export $(dbus-launch) # Create a folder on the cloud with the name of the server, and in it another folder with today\u0026#39;s date [ -z \u0026#34;$(megals --reload /Root/backup_${SERVER})\u0026#34; ] \u0026amp;\u0026amp; megamkdir /Root/backup_${SERVER} # Cleaning old unnecessary logs while [ $(megals --reload /Root/backup_${SERVER} | grep -E \u0026#34;/Root/backup_${SERVER}/[0-9]{4}-[0-9]{2}-[0-9]{2}$\u0026#34; | wc -l) -gt ${DAYS_TO_BACKUP} ] do TO_REMOVE=$(megals --reload /Root/backup_${SERVER} | grep -E \u0026#34;/Root/backup_${SERVER}/[0-9]{4}-[0-9]{2}-[0-9]{2}$\u0026#34; | sort | head -n 1) megarm ${TO_REMOVE} done # Create a folder for backup curday=$(date +%F) megamkdir /Root/backup_${SERVER}/${curday} 2\u0026gt; /dev/null # Upload the files to cloud megacopy --reload --no-progress --local ${WORKING_DIR} --remote /Root/backup_${SERVER}/${curday} \u0026gt; /dev/null # Kill DBUS-daemon kill ${DBUS_SESSION_BUS_PID} rm -f ${DBUS_SESSION_BUS_ADDRESS} # Remove temporary files rm -rf ${WORKING_DIR} exit 0 Now you need to allow the execution of the script:\nchmod a+x /opt/scripts/do_backup.sh Next, you need to test the script by directly executing it:\n/opt/scripts/do_backup.sh After that, you can go to the mega account through the web interface and check that the necessary files have appeared there.\nCreating a script autorun rule in crontab In order for the script to run according to a certain time schedule, let\u0026rsquo;s add it to the crontab.\n04 04 * * * root /opt/scripts/do_backup.sh Is it optimal to use ? In my case, the backup folder is 538.8 Mb in size.\nA total of 50,000 Mb of free space on the cloud. Let each backup weigh approximately 550 Mb. We divide 50,000 by 550, we have:\n50000 / 550 ≈ 90.9 This means that the cloud is enough for 90 backups, which is quite a large number, especially if you take into account the free service of Mega.\nBut optimality as a whole depends on factors:\nBackup size Backup frequency Storage duration of each backup Therefore, it is advisable to evaluate the optimality separately for each individual case.\n","date":"2016-10-02T00:00:00Z","image":"https://blog.moroz.cc/post/automatic-server-backup-to-the-mega.nz-cloud/header_hu07d9fa8bf00f81164ad47a9c5dedba00_591360_120x120_fill_q75_box_smart1.jpg","permalink":"https://blog.moroz.cc/post/automatic-server-backup-to-the-mega.nz-cloud/","title":"Automatic server backup to the Mega.nz cloud"},{"content":"Introduction SSH Tunnels allow you to forward specific ports on a remote server or locally. This is very convenient when we need to get to a specific server in the local network.\nTechnically, it is possible to forward both local and remote ports. We will consider both cases.\nLocal port forwarding Let\u0026rsquo;s imagine the situation when we are inside a local network, where access to the Internet is blocked by a firewall for all but one server that has direct access to the Internet. We have SSH access to this server. Our task is to connect to a remote server that is on an external SSH network.\nFor example:\nssh -f -N -L 2222:212.212.212.212:22 user@111.111.111.111 This command will create a tunnel by opening port 22 of the remote server through the local server, and we can connect to the remote server through port 2222, which will listen on the local interface of our PC.\nWe should leave the terminal with the tunnel session running, and in the new terminal we can connect to the remote server with the command:\nssh -p2222 127.0.0.1 Finally, we have SSH access to the remote server.\nRemote port forwarding This case is the opposite of local port forwarding. Let\u0026rsquo;s imagine the same local network and remote server, only now the local PC has access to the Internet through NAT. Let\u0026rsquo;s say that a system administrator who has physical access to a remote server needs to RDP to computer 192.168.0.2, but NAT will not allow him to do so directly.\nConsider an example where there is an RDP service that by default is running on local port 3389. Let\u0026rsquo;s send it to remote port 3333.\nssh -f -N -R 3333:127.0.0.1:3389 username@212.212.212.212 After setting up such a tunnel, the sysadmin sitting behind the remote server will be able to connect to us by RDP using the address 127.0.0.1:3333 in the RDP client.\nConclusions These simple techniques of tunneling through the SSH protocol allow you to redirect the ports of a local or remote service as you like, which can be useful if you need to bypass certain network restrictions, such as NAT.\n","date":"2016-09-26T00:00:00Z","image":"https://blog.moroz.cc/post/port-forwarding-using-an-ssh-tunnel/header_hu9370f1f3ff0baab462d9f98d73fd8fc5_63678_120x120_fill_q75_h2_box_smart1_2.webp","permalink":"https://blog.moroz.cc/post/port-forwarding-using-an-ssh-tunnel/","title":"Port forwarding using an SSH tunnel"}]