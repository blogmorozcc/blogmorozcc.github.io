[{"content":"Introduction When using systemd-boot as your bootloader, you may find it convenient to have the system remember the last selected entry on each subsequent boot. This is especially useful for users who frequently switch between different operating systems or kernels. By configuring systemd-boot to remember the last chosen boot entry, you can streamline the boot process and avoid having to manually select the desired option every time the system restarts.\nModifying the Configuration File To achieve this functionality, you need to modify the loader.conf configuration file. The exact location of this file can vary depending on the Linux distribution you are using.\nPersonally, I have used several Linux distributions, and the path for loader.conf was different in each of them, for example:\nFor Ubuntu it was /boot/efi/loader/loader.conf For Arch Linux it was /boot/loader/loader.conf For EndeavourOS it was /efi/loader/loader.conf To modify the file open the Terminal and follow this steps:\nOpen the loader.conf file for editing, for example: sudo nano /boot/loader/loader.conf Modify the default parameter like below: default @saved Save the file (In nano, this is done with the keyboard shortcut `Ctrl + O\u0026rsquo;). At the next boot, after you will select some entry it will be remembered as the default.\nConclusions By configuring systemd-boot to remember the last selected entry, you can streamline your boot process and enhance the overall user experience. Whether you\u0026rsquo;re using Arch Linux, Ubuntu, or another distribution that employs systemd-boot, this simple modification can save you time and make your system startup more efficient.\nRemember to adapt the file paths and commands based on the specifics of your distribution. With this configuration in place, your system will automatically boot into the last chosen entry, reducing the need for manual intervention during the boot process.\n","date":"2023-11-22T00:00:00Z","image":"https://blog.moroz.cc/post/how-to-make-systemd-boot-remember-the-last-selected-entry/header_hu0e765b8aca8d9ba54a80770b06516939_1619_120x120_fill_box_smart1_3.png","permalink":"https://blog.moroz.cc/post/how-to-make-systemd-boot-remember-the-last-selected-entry/","title":"How to make systemd-boot remember the last selected entry"},{"content":"Introduction Currently, there are many platforms for online video content streaming, such as YouTube, Twitch, and others. They use the RTMP protocol (Real-Time Messaging Protocol) to broadcast streaming video over the Internet. While these platforms have powerful video streaming capabilities, in some cases independence from the streaming platform and its rules makes perfect sense.\nIn this article, I will provide instructions on the deployment of the RTMP service based on Nginx-RTMP, which will allow receiving an RTMP stream from the streamer\u0026rsquo;s computer, and converting it to modern HLS and DASH formats for viewing in the receiver program.\nPrerequisites To deploy the RTMP service, you need to have:\nA clean virtual machine or physical server based on the Linux OS. A computer for streaming. To work outside the local network, in the global Internet:\nDedicated IP address. Domain. The instructions will use a VPS based on Debian 11.\nWorking with Nginx-RTMP Installation First of all, you need to install nginx and libnginx-mod-rtmp packages. To do this, you need to execute the following commands:\n1 2 sudo apt update sudo apt install nginx libnginx-mod-rtmp Set up RTMP service Once installed, you need to configure the Nginx web server to listen on port 1935 to receive the RTMP stream. To do this, you need to edit the file /etc/nginx/nginx.conf:\nsudo nano /etc/nginx/nginx.conf At the end of the file, you need to add the configuration of the RTMP server:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 ... rtmp { server { listen 1935; chunk_size 4096; allow publish 127.0.0.1; allow publish 192.168.0.0/24; deny publish all; application live { live on; record off; hls on; hls_path /var/www/html/stream/hls; hls_fragment 3; hls_playlist_length 60; dash on; dash_path /var/www/html/stream/dash; } } } ... An explanation of the important aspects of this configuration:\nlisten 1935 - specifies the port on which the RTMP server is running. chunk_size 4096 - sets the block size, 4 KB each. allow publish [IP / Subnet] - each line specifies an IP or subnet that is allowed to send the RTMP stream to the server. deny publish all - prohibits receiving RTMP stream from all other addresses/networks. application live - configuration for converting RTMP to HLS and DASH formats, where hls_path and dash_path indicate paths to directories for placing playlists. live on - allows you to receive data via a video stream. record off - disables recording of the video stream to a file on the disk. Set up streaming HLS, DASH Next, you need to deploy a virtual host that will allow access to HLS or DASH streams via the HTTP/HTTPS protocol.\nFirst, you need to create two directories for storing video stream fragments for HLS and DASH:\n1 2 sudo mkdir -p /var/www/html/stream/hls sudo mkdir -p /var/www/html/stream/dash And also establish the owner and rights:\n1 2 sudo chown -R www-data:www-data /var/www/html/stream sudo chmod -R 755 /var/www/html/stream For the virtual host to work, you need to create a new configuration file (for example rtmp) in the /etc/nginx/sites-available directory:\nsudo nano /etc/nginx/sites-available/rtmp The rtmp host file consists of the following:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 server { listen 443 ssl; listen 80; server_name rtmp.yourdomain.com; ssl_certificate /etc/ssl/yourdomain.crt; ssl_certificate_key /etc/ssl/yourdomain.key; ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2; location / { add_header Access-Control-Allow-Origin *; root /var/www/html/stream; } } types { application/dash+xml mpd; } Explanation for this configuration:\nReplace rtmp.yourdomain.com with your domain. If you want to use SSL, also write the certificate and key files under the paths /etc/ssl/yourdomain.crt and /etc/ssl/yourdomain.key. If you don\u0026rsquo;t want to use SSL, remove the lines starting with ssl and listen 443 ssl from the file. In order for all the configurations to take effect, you need to enable the virtual host and restart Nginx:\n1 2 sudo ln -s /etc/nginx/sites-available/rtmp /etc/nginx/sites-enabled/ sudo service nginx restart Broadcasting in OBS Studio The best suited program for broadcasting is OBS Studio.\nFirst of all, it is necessary to create a scene, adjust the sound, and the appearance of the broadcast.\nTo configure streaming parameters, you need to go to Settings and select the Stream tab. The following parameters must be set there:\nService: Custom Server: rtmp://rtmp.yourdomain.com/live (instead of domain, you can specify IP, for example http://11.22.33.44/live) Stream Key: obs_stream Example settings:\nTo start a video broadcast, you need to click Start Streaming in the main window of the program:\nViewing the broadcast The broadcast can now be viewed using any application that supports the HLS and DASH protocols. The easiest way would be to watch in VLC by opening the link to the stream.\nTo begin with, let\u0026rsquo;s understand how a link to streams is formed in the configured service:\nHLS: {protocol}://{domain}/hls/{stream key}.m3u8 DASH: {protocol}://{domain}/dash/{stream key}.mpd For example, if you deployed a service at the address rtmp.yourdomain.com that uses SSL, and in the OBS settings you specified the obs_stream key, then in this case the links will be as follows:\n1 2 https://rtmp.yourdomain.com/hls/obs_stream.m3u8 https://rtmp.yourdomain.com/dash/obs_stream.mpd To view in VLC, you need to press Ctrl + N, or go to the menu Media \u0026gt; Open Network Stream, specify a link to one of the formats, and press Play.\nConclusions In this way, you can create your own broadcasting service, which will be independent of popular services.\nAdvantages of such a solution:\nPrivacy and full control over the infrastructure, guarantee that the flow data is not stored. You do not need to follow the rules of the service (for example, a ban on broadcasting certain content). But there are certain disadvantages:\nSuch a solution requires certain server resources. The owner needs to spend time and money on maintaining and maintaining the security of his infrastructure. ","date":"2022-07-20T00:00:00Z","image":"https://blog.moroz.cc/post/deploying-an-rtmp-server-for-streaming-using-nginx-rtmp/header_hu41968337912a42023606e3de60723367_1230034_120x120_fill_q75_box_smart1.jpeg","permalink":"https://blog.moroz.cc/post/deploying-an-rtmp-server-for-streaming-using-nginx-rtmp/","title":"Deploying an RTMP server for streaming using Nginx RTMP"}]